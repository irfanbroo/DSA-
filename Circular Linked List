#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    return new_node;
}

// Function to insert a new node at the beginning of the list
void insertAtBeginning(struct Node** head_ref, int new_data) {
    struct Node* new_node = newNode(new_data);
    if (*head_ref == NULL) {
        new_node->next = new_node; // Point to itself to make it circular
        *head_ref = new_node;
        return;
    }
    struct Node* last_node = *head_ref;
    while (last_node->next != *head_ref) {
        last_node = last_node->next;
    }
    new_node->next = *head_ref;
    last_node->next = new_node;
    *head_ref = new_node;
}

// Function to insert a new node at the end of the list
void insertAtEnd(struct Node** head_ref, int new_data) {
    struct Node* new_node = newNode(new_data);
    if (*head_ref == NULL) {
        new_node->next = new_node; // Point to itself to make it circular
        *head_ref = new_node;
        return;
    }
    struct Node* last_node = *head_ref;
    while (last_node->next != *head_ref) {
        last_node = last_node->next;
    }
    last_node->next = new_node;
    new_node->next = *head_ref;
}

// Function to print the circular linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    if (head != NULL) {
        do {
            printf("%d ", temp->data);
            temp = temp->next;
        } while (temp != head);
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;

    insertAtEnd(&head, 6);
    insertAtBeginning(&head, 7);
    insertAtBeginning(&head, 1);
    insertAtEnd(&head, 4);

    printf("Created circular linked list is: ");
    printList(head);

    return 0;
}
